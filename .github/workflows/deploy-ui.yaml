name: Deploy Jitsi Meet to EC2

on:
  push:
    branches: 
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1  # Adjust to match your EC2 region
        
    - name: Get EC2 Instance ID
      id: get-instance-id
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=ip-address,Values=13.52.18.125" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "Found instance ID: $INSTANCE_ID"

    - name: Clean existing directory
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ steps.get-instance-id.outputs.instance-id }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "echo \"=== Cleaning existing jitsi-meet-build directory ===\"",
            "sudo rm -rf /opt/jitsi-meet-build",
            "echo \"✅ Removed existing jitsi-meet-build directory\""
          ]' \
          --timeout-seconds 60 \
          --query "Command.CommandId" \
          --output text)
        
        # Wait for completion
        sleep 5
        for i in {1..12}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
            --query "Status" \
            --output text 2>/dev/null || echo "InProgress")
          
          if [ "$STATUS" != "InProgress" ]; then break; fi
          sleep 5
        done
        
        # Show output
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
          --query "StandardOutputContent" \
          --output text
        
        if [ "$STATUS" != "Success" ]; then
          echo "❌ Clean step failed"
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
            --query "StandardErrorContent" \
            --output text
          exit 1
        fi

    - name: Clone repository
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ steps.get-instance-id.outputs.instance-id }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "echo \"=== Cloning jitsi-meet repository ===\"",
            "cd /opt",
            "sudo git clone git@github.com:heyjoe-io/jitsi-meet.git jitsi-meet-build",
            "echo \"✅ Repository cloned successfully\"",
            "sudo chown -R $(whoami):$(whoami) /opt/jitsi-meet-build",
            "echo \"✅ Permissions updated\""
          ]' \
          --timeout-seconds 180 \
          --query "Command.CommandId" \
          --output text)
        
        # Wait for completion
        sleep 5
        for i in {1..36}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
            --query "Status" \
            --output text 2>/dev/null || echo "InProgress")
          
          if [ "$STATUS" != "InProgress" ]; then break; fi
          if [ $((i % 6)) -eq 0 ]; then echo "Cloning... (${i}0 seconds elapsed)"; fi
          sleep 5
        done
        
        # Show output
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
          --query "StandardOutputContent" \
          --output text
        
        if [ "$STATUS" != "Success" ]; then
          echo "❌ Clone step failed"
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
            --query "StandardErrorContent" \
            --output text
          exit 1
        fi

    - name: Run update script
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ steps.get-instance-id.outputs.instance-id }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "echo \"=== Running Jitsi UI update script ===\"",
            "sudo /usr/local/bin/update-jitsi-ui.sh",
            "echo \"✅ Update script completed successfully!\""
          ]' \
          --timeout-seconds 600 \
          --query "Command.CommandId" \
          --output text)
        
        # Wait for completion with more frequent updates
        sleep 5
        for i in {1..120}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
            --query "Status" \
            --output text 2>/dev/null || echo "InProgress")
          
          if [ "$STATUS" != "InProgress" ]; then break; fi
          if [ $((i % 12)) -eq 0 ]; then echo "Running update script... (${i}0 seconds elapsed)"; fi
          sleep 5
        done
        
        # Show output
        echo "==================== UPDATE SCRIPT OUTPUT ===================="
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
          --query "StandardOutputContent" \
          --output text
        
        if [ "$STATUS" != "Success" ]; then
          echo "❌ Update script failed"
          echo "==================== ERROR OUTPUT ===================="
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
            --query "StandardErrorContent" \
            --output text
          exit 1
        else
          echo "✅ Deployment completed successfully!"
        fi