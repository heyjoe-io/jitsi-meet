name: Deploy Jitsi Meet to EC2

on:
  push:
    branches: 
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1  # Adjust to match your EC2 region
        
    - name: Get EC2 Instance ID
      id: get-instance-id
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=ip-address,Values=13.52.18.125" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        echo "instance-id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "Found instance ID: $INSTANCE_ID"

    - name: Deploy Jitsi Meet
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ steps.get-instance-id.outputs.instance-id }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "echo \"=== Starting Jitsi Meet deployment ===\"",
            "sudo /usr/local/bin/update-jitsi-ui.sh",
            "echo \"✅ Deployment completed successfully!\""
          ]' \
          --timeout-seconds 900 \
          --query "Command.CommandId" \
          --output text)
        
        echo "Command ID: $COMMAND_ID"
        echo "Running deployment script (this typically takes ~10 minutes)..."
        
        # Wait for completion with progress updates every minute
        sleep 10
        for i in {1..180}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
            --query "Status" \
            --output text 2>/dev/null || echo "InProgress")
          
          if [ "$STATUS" != "InProgress" ]; then
            echo "Command completed with status: $STATUS"
            break
          fi
          
          # Show progress every minute (12 iterations * 5 seconds = 60 seconds)
          if [ $((i % 12)) -eq 0 ]; then
            MINUTES=$((i * 5 / 60))
            echo "Still building... (${MINUTES} minutes elapsed)"
          fi
          
          sleep 5
        done
        
        # Show complete output
        echo ""
        echo "==================== UPDATE SCRIPT OUTPUT ===================="
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
          --query "StandardOutputContent" \
          --output text
        
        # Show any errors
        STDERR=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ steps.get-instance-id.outputs.instance-id }} \
          --query "StandardErrorContent" \
          --output text 2>/dev/null)
        
        if [ "$STDERR" != "None" ] && [ ! -z "$STDERR" ]; then
          echo ""
          echo "==================== ERROR OUTPUT ===================="
          echo "$STDERR"
        fi
        
        # Check final status
        if [ "$STATUS" != "Success" ]; then
          echo "❌ Deployment failed with status: $STATUS"
          exit 1
        else
          echo "✅ Deployment completed successfully!"
        fi